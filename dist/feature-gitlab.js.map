{"version":3,"file":"feature-gitlab.js","mappings":"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","sources":["webpack://gitlens/./src/plus/gitlab/gitlab.ts","webpack://gitlens/./src/plus/gitlab/models.ts"],"sourcesContent":["import type { HttpsProxyAgent } from 'https-proxy-agent';\nimport { Disposable, Uri, window } from 'vscode';\nimport { fetch, getProxyAgent, RequestInit, Response } from '@env/fetch';\nimport { isWeb } from '@env/platform';\nimport { configuration, CustomRemoteType } from '../../configuration';\nimport type { Container } from '../../container';\nimport {\n\tAuthenticationError,\n\tAuthenticationErrorReason,\n\tProviderFetchError,\n\tProviderRequestClientError,\n\tProviderRequestNotFoundError,\n\tProviderRequestRateLimitError,\n} from '../../errors';\nimport { Account, DefaultBranch, IssueOrPullRequest, IssueOrPullRequestType, PullRequest } from '../../git/models';\nimport type { RichRemoteProvider } from '../../git/remotes/provider';\nimport { LogCorrelationContext, Logger, LogLevel } from '../../logger';\nimport { debug } from '../../system/decorators/log';\nimport { Stopwatch } from '../../system/stopwatch';\nimport { equalsIgnoreCase } from '../../system/string';\nimport {\n\tGitLabCommit,\n\tGitLabIssue,\n\tGitLabMergeRequest,\n\tGitLabMergeRequestREST,\n\tGitLabMergeRequestState,\n\tGitLabUser,\n} from './models';\n\nexport class GitLabApi implements Disposable {\n\tprivate _disposable: Disposable | undefined;\n\tprivate _projectIds = new Map<string, Promise<string | undefined>>();\n\n\tconstructor(_container: Container) {\n\t\tthis._disposable = Disposable.from(\n\t\t\tconfiguration.onDidChange(e => {\n\t\t\t\tif (configuration.changed(e, 'proxy') || configuration.changed(e, 'remotes')) {\n\t\t\t\t\tthis._projectIds.clear();\n\t\t\t\t\tthis._proxyAgents.clear();\n\t\t\t\t\tthis._ignoreSSLErrors.clear();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tconfiguration.onDidChangeAny(e => {\n\t\t\t\tif (e.affectsConfiguration('http.proxy') || e.affectsConfiguration('http.proxyStrictSSL')) {\n\t\t\t\t\tthis._projectIds.clear();\n\t\t\t\t\tthis._proxyAgents.clear();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposable?.dispose();\n\t}\n\n\tprivate _proxyAgents = new Map<string, HttpsProxyAgent | null | undefined>();\n\tprivate getProxyAgent(provider: RichRemoteProvider): HttpsProxyAgent | undefined {\n\t\tif (isWeb) return undefined;\n\n\t\tlet proxyAgent = this._proxyAgents.get(provider.id);\n\t\tif (proxyAgent === undefined) {\n\t\t\tconst ignoreSSLErrors = this.getIgnoreSSLErrors(provider);\n\t\t\tproxyAgent = getProxyAgent(ignoreSSLErrors === true || ignoreSSLErrors === 'force' ? false : undefined);\n\t\t\tthis._proxyAgents.set(provider.id, proxyAgent ?? null);\n\t\t}\n\n\t\treturn proxyAgent ?? undefined;\n\t}\n\n\tprivate _ignoreSSLErrors = new Map<string, boolean | 'force'>();\n\tprivate getIgnoreSSLErrors(provider: RichRemoteProvider): boolean | 'force' {\n\t\tif (isWeb) return false;\n\n\t\tlet ignoreSSLErrors = this._ignoreSSLErrors.get(provider.id);\n\t\tif (ignoreSSLErrors === undefined) {\n\t\t\tconst cfg = configuration\n\t\t\t\t.get('remotes')\n\t\t\t\t?.find(remote => remote.type === CustomRemoteType.GitLab && remote.domain === provider.domain);\n\t\t\tignoreSSLErrors = cfg?.ignoreSSLErrors ?? false;\n\t\t\tthis._ignoreSSLErrors.set(provider.id, ignoreSSLErrors);\n\t\t}\n\n\t\treturn ignoreSSLErrors;\n\t}\n\n\t@debug<GitLabApi['getAccountForCommit']>({ args: { 0: p => p.name, 1: '<token>' } })\n\tasync getAccountForCommit(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\towner: string,\n\t\trepo: string,\n\t\tref: string,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t\tavatarSize?: number;\n\t\t},\n\t): Promise<Account | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tconst projectId = await this.getProjectId(provider, token, owner, repo, options?.baseUrl);\n\t\tif (!projectId) return undefined;\n\n\t\ttry {\n\t\t\tconst commit = await this.request<GitLabCommit>(\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\toptions?.baseUrl,\n\t\t\t\t`v4/projects/${projectId}/repository/commits/${ref}?stats=false`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t// ...options,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tlet user: GitLabUser | undefined;\n\n\t\t\tconst users = await this.findUser(provider, token, commit.author_name, options);\n\t\t\tfor (const u of users) {\n\t\t\t\tif (u.name === commit.author_name || (u.publicEmail && u.publicEmail === commit.author_email)) {\n\t\t\t\t\tuser = u;\n\t\t\t\t\tif (u.state === 'active') break;\n\t\t\t\t} else if (\n\t\t\t\t\tequalsIgnoreCase(u.name, commit.author_name) ||\n\t\t\t\t\t(u.publicEmail && equalsIgnoreCase(u.publicEmail, commit.author_email))\n\t\t\t\t) {\n\t\t\t\t\tuser = u;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (user == null) return undefined;\n\n\t\t\t// If the avatarUrl is a relative URL, make it absolute using the webUrl (assuming the webUrl is the root URL with the username tacked on)\n\t\t\tif (user.avatarUrl && !/^([a-zA-Z][\\w+.-]+):/.test(user.avatarUrl)) {\n\t\t\t\tuser.avatarUrl = Uri.joinPath(Uri.parse(user.webUrl), '..', user.avatarUrl).toString();\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tprovider: provider,\n\t\t\t\tname: user.name || undefined,\n\t\t\t\temail: commit.author_email || undefined,\n\t\t\t\tavatarUrl: user.avatarUrl || undefined,\n\t\t\t};\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthrow this.handleException(ex, provider, cc);\n\t\t}\n\t}\n\n\t@debug<GitLabApi['getAccountForEmail']>({ args: { 0: p => p.name, 1: '<token>' } })\n\tasync getAccountForEmail(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\t_owner: string,\n\t\t_repo: string,\n\t\temail: string,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t\tavatarSize?: number;\n\t\t},\n\t): Promise<Account | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\ttry {\n\t\t\tconst [user] = await this.findUser(provider, token, email, options);\n\t\t\tif (user == null) return undefined;\n\n\t\t\treturn {\n\t\t\t\tprovider: provider,\n\t\t\t\tname: user.name || undefined,\n\t\t\t\temail: user.publicEmail || undefined,\n\t\t\t\tavatarUrl: user.avatarUrl || undefined,\n\t\t\t};\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthrow this.handleException(ex, provider, cc);\n\t\t}\n\t}\n\n\t@debug<GitLabApi['getDefaultBranch']>({ args: { 0: p => p.name, 1: '<token>' } })\n\tasync getDefaultBranch(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\towner: string,\n\t\trepo: string,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t},\n\t): Promise<DefaultBranch | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tinterface QueryResult {\n\t\t\tdata: {\n\t\t\t\tproject:\n\t\t\t\t\t| {\n\t\t\t\t\t\t\trepository: { rootRef: string } | null | undefined;\n\t\t\t\t\t  }\n\t\t\t\t\t| null\n\t\t\t\t\t| undefined;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst query = `query getDefaultBranch(\n\t$fullPath: ID!\n) {\n\tproject(fullPath: $fullPath) {\n\t\trepository {\n\t\t\trootRef\n\t\t}\n}`;\n\n\t\t\tconst rsp = await this.graphql<QueryResult>(provider, token, options?.baseUrl, query, {\n\t\t\t\tfullPath: `${owner}/${repo}`,\n\t\t\t});\n\n\t\t\tconst defaultBranch = rsp?.data?.project?.repository?.rootRef ?? undefined;\n\t\t\tif (defaultBranch == null) return undefined;\n\n\t\t\treturn {\n\t\t\t\tprovider: provider,\n\t\t\t\tname: defaultBranch,\n\t\t\t};\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthrow this.handleException(ex, provider, cc);\n\t\t}\n\t}\n\n\t@debug<GitLabApi['getIssueOrPullRequest']>({ args: { 0: p => p.name, 1: '<token>' } })\n\tasync getIssueOrPullRequest(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\towner: string,\n\t\trepo: string,\n\t\tnumber: number,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t},\n\t): Promise<IssueOrPullRequest | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tinterface QueryResult {\n\t\t\tdata: {\n\t\t\t\tproject: {\n\t\t\t\t\tmergeRequest: GitLabMergeRequest | null;\n\t\t\t\t\tissue: GitLabIssue | null;\n\t\t\t\t} | null;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst query = `query getIssueOrMergeRequest(\n\t$fullPath: ID!\n\t$iid: String!\n) {\n\tproject(fullPath: $fullPath) {\n\t\tmergeRequest(iid: $iid) {\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tavatarUrl\n\t\t\t\twebUrl\n\t\t\t}\n\t\t\tiid\n\t\t\ttitle\n\t\t\tdescription\n\t\t\tstate\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tmergedAt\n\t\t\twebUrl\n\t\t}\n\t\tissue(iid: $iid) {\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tavatarUrl\n\t\t\t\twebUrl\n\t\t\t}\n\t\t\tiid\n\t\t\ttitle\n\t\t\tdescription\n\t\t\tstate\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tclosedAt\n\t\t\twebUrl\n\t\t}\n\t}\n}`;\n\n\t\t\tconst rsp = await this.graphql<QueryResult>(provider, token, options?.baseUrl, query, {\n\t\t\t\tfullPath: `${owner}/${repo}`,\n\t\t\t\tiid: String(number),\n\t\t\t});\n\n\t\t\tif (rsp?.data?.project?.issue != null) {\n\t\t\t\tconst issue = rsp.data.project.issue;\n\t\t\t\treturn {\n\t\t\t\t\tprovider: provider,\n\t\t\t\t\ttype: IssueOrPullRequestType.Issue,\n\t\t\t\t\tid: issue.iid,\n\t\t\t\t\tdate: new Date(issue.createdAt),\n\t\t\t\t\ttitle: issue.title,\n\t\t\t\t\tclosed: issue.state === 'closed',\n\t\t\t\t\tclosedDate: issue.closedAt == null ? undefined : new Date(issue.closedAt),\n\t\t\t\t\turl: issue.webUrl,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (rsp?.data?.project?.mergeRequest != null) {\n\t\t\t\tconst mergeRequest = rsp.data.project.mergeRequest;\n\t\t\t\treturn {\n\t\t\t\t\tprovider: provider,\n\t\t\t\t\ttype: IssueOrPullRequestType.PullRequest,\n\t\t\t\t\tid: mergeRequest.iid,\n\t\t\t\t\tdate: new Date(mergeRequest.createdAt),\n\t\t\t\t\ttitle: mergeRequest.title,\n\t\t\t\t\tclosed: mergeRequest.state === 'closed',\n\t\t\t\t\t// TODO@eamodio this isn't right, but GitLab doesn't seem to provide a closedAt on merge requests in GraphQL\n\t\t\t\t\tclosedDate: mergeRequest.state === 'closed' ? new Date(mergeRequest.updatedAt) : undefined,\n\t\t\t\t\turl: mergeRequest.webUrl,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthrow this.handleException(ex, provider, cc);\n\t\t}\n\t}\n\n\t@debug<GitLabApi['getPullRequestForBranch']>({ args: { 0: p => p.name, 1: '<token>' } })\n\tasync getPullRequestForBranch(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\towner: string,\n\t\trepo: string,\n\t\tbranch: string,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t\tavatarSize?: number;\n\t\t\tinclude?: GitLabMergeRequestState[];\n\t\t},\n\t): Promise<PullRequest | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tinterface QueryResult {\n\t\t\tdata: {\n\t\t\t\tproject: {\n\t\t\t\t\tmergeRequests?: {\n\t\t\t\t\t\tnodes: GitLabMergeRequest[];\n\t\t\t\t\t} | null;\n\t\t\t\t\topened?: {\n\t\t\t\t\t\tnodes: GitLabMergeRequest[];\n\t\t\t\t\t} | null;\n\t\t\t\t\tclosed?: {\n\t\t\t\t\t\tnodes: GitLabMergeRequest[];\n\t\t\t\t\t} | null;\n\t\t\t\t\tmerged?: {\n\t\t\t\t\t\tnodes: GitLabMergeRequest[];\n\t\t\t\t\t} | null;\n\t\t\t\t} | null;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst fragment = `\n\t\t\tnodes {\n\t\t\t\tiid\n\t\t\t\tauthor {\n\t\t\t\t\tname\n\t\t\t\t\tavatarUrl\n\t\t\t\t\twebUrl\n\t\t\t\t}\n\t\t\t\ttitle\n\t\t\t\tdescription\n\t\t\t\tstate\n\t\t\t\tcreatedAt\n\t\t\t\tupdatedAt\n\t\t\t\tmergedAt\n\t\t\t\twebUrl\n\t\t\t}`;\n\n\t\t\tconst query = `query getMergeRequestForBranch(\n\t$fullPath: ID!\n\t$branches: [String!]\n) {\n\tproject(fullPath: $fullPath) {\n\t\t${\n\t\t\toptions?.include == null\n\t\t\t\t? `mergeRequests(sourceBranches: $branches sort: UPDATED_DESC first: 1) {\n\t\t\t${fragment}\n\t\t}`\n\t\t\t\t: ''\n\t\t}\n\t\t${\n\t\t\toptions?.include?.includes(GitLabMergeRequestState.OPEN)\n\t\t\t\t? `opened: mergeRequests(sourceBranches: $branches state: opened sort: UPDATED_DESC first: 1) {\n\t\t\t${fragment}\n\t\t}`\n\t\t\t\t: ''\n\t\t}\n\t\t${\n\t\t\toptions?.include?.includes(GitLabMergeRequestState.MERGED)\n\t\t\t\t? `merged: mergeRequests(sourceBranches: $branches state: merged sort: UPDATED_DESC first: 1) {\n\t\t\t${fragment}\n\t\t}`\n\t\t\t\t: ''\n\t\t}\n\t\t${\n\t\t\toptions?.include?.includes(GitLabMergeRequestState.CLOSED)\n\t\t\t\t? `closed: mergeRequests(sourceBranches: $branches state: closed sort: UPDATED_DESC first: 1) {\n\t\t\t${fragment}\n\t\t}`\n\t\t\t\t: ''\n\t\t}\n\t}\n}`;\n\n\t\t\tconst rsp = await this.graphql<QueryResult>(provider, token, options?.baseUrl, query, {\n\t\t\t\tfullPath: `${owner}/${repo}`,\n\t\t\t\tbranches: [branch],\n\t\t\t\tstate: options?.include,\n\t\t\t});\n\n\t\t\tlet pr: GitLabMergeRequest | undefined;\n\n\t\t\tif (options?.include == null) {\n\t\t\t\tpr = rsp?.data?.project?.mergeRequests?.nodes?.[0];\n\t\t\t} else {\n\t\t\t\tfor (const state of options.include) {\n\t\t\t\t\tlet mr;\n\t\t\t\t\tif (state === GitLabMergeRequestState.OPEN) {\n\t\t\t\t\t\tmr = rsp?.data?.project?.opened?.nodes?.[0];\n\t\t\t\t\t} else if (state === GitLabMergeRequestState.MERGED) {\n\t\t\t\t\t\tmr = rsp?.data?.project?.merged?.nodes?.[0];\n\t\t\t\t\t} else if (state === GitLabMergeRequestState.CLOSED) {\n\t\t\t\t\t\tmr = rsp?.data?.project?.closed?.nodes?.[0];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mr != null && (pr == null || new Date(mr.updatedAt) > new Date(pr.updatedAt))) {\n\t\t\t\t\t\tpr = mr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pr == null) return undefined;\n\n\t\t\treturn new PullRequest(\n\t\t\t\tprovider,\n\t\t\t\t{\n\t\t\t\t\tname: pr.author?.name ?? 'Unknown',\n\t\t\t\t\tavatarUrl: pr.author?.avatarUrl ?? '',\n\t\t\t\t\turl: pr.author?.webUrl ?? '',\n\t\t\t\t},\n\t\t\t\tString(pr.iid),\n\t\t\t\tpr.title,\n\t\t\t\tpr.webUrl,\n\t\t\t\tGitLabMergeRequest.fromState(pr.state),\n\t\t\t\tnew Date(pr.updatedAt),\n\t\t\t\t// TODO@eamodio this isn't right, but GitLab doesn't seem to provide a closedAt on merge requests in GraphQL\n\t\t\t\tpr.state !== GitLabMergeRequestState.CLOSED ? undefined : new Date(pr.updatedAt),\n\t\t\t\tpr.mergedAt == null ? undefined : new Date(pr.mergedAt),\n\t\t\t);\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthrow this.handleException(ex, provider, cc);\n\t\t}\n\t}\n\n\t@debug<GitLabApi['getPullRequestForCommit']>({ args: { 0: p => p.name, 1: '<token>' } })\n\tasync getPullRequestForCommit(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\towner: string,\n\t\trepo: string,\n\t\tref: string,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t\tavatarSize?: number;\n\t\t},\n\t): Promise<PullRequest | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tconst projectId = await this.getProjectId(provider, token, owner, repo, options?.baseUrl);\n\t\tif (!projectId) return undefined;\n\n\t\ttry {\n\t\t\tconst mrs = await this.request<GitLabMergeRequestREST[]>(\n\t\t\t\tprovider,\n\n\t\t\t\ttoken,\n\t\t\t\toptions?.baseUrl,\n\t\t\t\t`v4/projects/${projectId}/repository/commits/${ref}/merge_requests`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t// ...options,\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (mrs == null || mrs.length === 0) return undefined;\n\n\t\t\tif (mrs.length > 1) {\n\t\t\t\tmrs.sort(\n\t\t\t\t\t(a, b) =>\n\t\t\t\t\t\t(a.state === GitLabMergeRequestState.OPEN ? -1 : 1) -\n\t\t\t\t\t\t\t(b.state === GitLabMergeRequestState.OPEN ? -1 : 1) ||\n\t\t\t\t\t\tnew Date(b.updated_at).getTime() - new Date(a.updated_at).getTime(),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn GitLabMergeRequestREST.from(mrs[0], provider);\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthrow this.handleException(ex, provider, cc);\n\t\t}\n\t}\n\n\tprivate async findUser(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\tsearch: string,\n\t\toptions?: {\n\t\t\tbaseUrl?: string;\n\t\t\tavatarSize?: number;\n\t\t},\n\t): Promise<GitLabUser[]> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tinterface QueryResult {\n\t\t\tdata: {\n\t\t\t\tusers: {\n\t\t\t\t\tnodes: {\n\t\t\t\t\t\tid: string;\n\t\t\t\t\t\tname: string;\n\t\t\t\t\t\tusername: string;\n\t\t\t\t\t\tpublicEmail?: string;\n\t\t\t\t\t\tstate: string;\n\t\t\t\t\t\tavatarUrl: string;\n\t\t\t\t\t\twebUrl: string;\n\t\t\t\t\t}[];\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst query = `query findUser(\n$search: String!\n) {\n\tusers(search: $search) {\n\t\tnodes {\n\t\t\tid\n\t\t\tname\n\t\t\tusername,\n\t\t\tpublicEmail,\n\t\t\tstate\n\t\t\tavatarUrl\n\t\t\twebUrl\n\t\t}\n\t}\n}`;\n\t\t\tconst rsp = await this.graphql<QueryResult>(provider, token, options?.baseUrl, query, {\n\t\t\t\tsearch: search,\n\t\t\t});\n\n\t\t\tconst matches = rsp?.data?.users?.nodes;\n\t\t\tif (matches == null || matches.length === 0) return [];\n\n\t\t\tconst users: GitLabUser[] = [];\n\n\t\t\tfor (const user of matches) {\n\t\t\t\tconst match = /gid:\\/\\/gitlab\\/User\\/([0-9]+)\\b/.exec(user.id);\n\t\t\t\tif (match == null) continue;\n\n\t\t\t\tusers.push({\n\t\t\t\t\tid: parseInt(match[1], 10),\n\t\t\t\t\tname: user.name,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tpublicEmail: user.publicEmail || undefined,\n\t\t\t\t\tstate: user.state,\n\t\t\t\t\tavatarUrl: user.avatarUrl,\n\t\t\t\t\twebUrl: user.webUrl,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn users;\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return [];\n\n\t\t\tthis.handleException(ex, provider, cc);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tprivate getProjectId(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\tgroup: string,\n\t\trepo: string,\n\t\tbaseUrl?: string,\n\t): Promise<string | undefined> {\n\t\tconst key = `${token}|${group}/${repo}`;\n\n\t\tlet projectId = this._projectIds.get(key);\n\t\tif (projectId == null) {\n\t\t\tprojectId = this.getProjectIdCore(provider, token, group, repo, baseUrl);\n\t\t\tthis._projectIds.set(key, projectId);\n\t\t}\n\n\t\treturn projectId;\n\t}\n\n\tprivate async getProjectIdCore(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\tgroup: string,\n\t\trepo: string,\n\t\tbaseUrl?: string,\n\t): Promise<string | undefined> {\n\t\tconst cc = Logger.getCorrelationContext();\n\n\t\tinterface QueryResult {\n\t\t\tdata: { project: { id: string } };\n\t\t}\n\n\t\ttry {\n\t\t\tconst query = `query getProjectId(\n\t$fullPath: ID!\n) {\n\tproject(fullPath: $fullPath) {\n\t\tid\n\t}\n}`;\n\t\t\tconst rsp = await this.graphql<QueryResult>(provider, token, baseUrl, query, {\n\t\t\t\tfullPath: `${group}/${repo}`,\n\t\t\t});\n\n\t\t\tconst gid = rsp?.data?.project?.id;\n\t\t\tif (gid == null) return undefined;\n\n\t\t\tconst match = /gid:\\/\\/gitlab\\/Project\\/([0-9]+)\\b/.exec(gid);\n\t\t\tif (match == null) return undefined;\n\n\t\t\tconst projectId = match[1];\n\n\t\t\tif (cc != null) {\n\t\t\t\tcc.exitDetails = `\\u2022 projectId=${projectId}`;\n\t\t\t}\n\t\t\treturn projectId;\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderRequestNotFoundError) return undefined;\n\n\t\t\tthis.handleException(ex, provider, cc);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate async graphql<T>(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\tbaseUrl: string | undefined,\n\t\tquery: string,\n\t\tvariables: { [key: string]: any },\n\t): Promise<T | undefined> {\n\t\tlet rsp: Response;\n\t\ttry {\n\t\t\tconst stopwatch =\n\t\t\t\tLogger.logLevel === LogLevel.Debug || Logger.isDebugging\n\t\t\t\t\t? new Stopwatch(`[GITLAB] POST ${baseUrl}`, { log: false })\n\t\t\t\t\t: undefined;\n\n\t\t\tconst agent = this.getProxyAgent(provider);\n\t\t\tconst ignoreSSLErrors = this.getIgnoreSSLErrors(provider);\n\t\t\tlet previousRejectUnauthorized;\n\n\t\t\ttry {\n\t\t\t\tif (ignoreSSLErrors === 'force') {\n\t\t\t\t\tpreviousRejectUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n\t\t\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\t\t\t\t}\n\n\t\t\t\trsp = await fetch(`${baseUrl ?? 'https://gitlab.com/api'}/graphql`, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: { authorization: `Bearer ${token}`, 'content-type': 'application/json' },\n\t\t\t\t\tagent: agent as any,\n\t\t\t\t\tbody: JSON.stringify({ query: query, variables: variables }),\n\t\t\t\t});\n\n\t\t\t\tif (rsp.ok) {\n\t\t\t\t\tconst data: T | { errors: { message: string }[] } = await rsp.json();\n\n\t\t\t\t\tif ('errors' in data) throw new ProviderFetchError('GitLab', rsp, data.errors);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\tthrow new ProviderFetchError('GitLab', rsp);\n\t\t\t} finally {\n\t\t\t\tif (ignoreSSLErrors === 'force') {\n\t\t\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = previousRejectUnauthorized;\n\t\t\t\t}\n\n\t\t\t\tconst match = /(^[^({\\n]+)/.exec(query);\n\t\t\t\tconst message = ` ${match?.[1].trim() ?? query}`;\n\n\t\t\t\tstopwatch?.stop({ message: message });\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderFetchError) {\n\t\t\t\tthis.handleRequestError(ex, token);\n\t\t\t} else if (Logger.isDebugging) {\n\t\t\t\tvoid window.showErrorMessage(`GitLab request failed: ${ex.message}`);\n\t\t\t}\n\n\t\t\tthrow ex;\n\t\t}\n\t}\n\n\tprivate async request<T>(\n\t\tprovider: RichRemoteProvider,\n\t\ttoken: string,\n\t\tbaseUrl: string | undefined,\n\t\troute: string,\n\t\toptions?: { method: RequestInit['method'] } & Record<string, unknown>,\n\t): Promise<T> {\n\t\tconst url = `${baseUrl ?? 'https://gitlab.com/api'}/${route}`;\n\n\t\tlet rsp: Response;\n\t\ttry {\n\t\t\tconst stopwatch =\n\t\t\t\tLogger.logLevel === LogLevel.Debug || Logger.isDebugging\n\t\t\t\t\t? new Stopwatch(`[GITLAB] ${options?.method ?? 'GET'} ${url}`, { log: false })\n\t\t\t\t\t: undefined;\n\n\t\t\tconst agent = this.getProxyAgent(provider);\n\t\t\tconst ignoreSSLErrors = this.getIgnoreSSLErrors(provider);\n\t\t\tlet previousRejectUnauthorized;\n\n\t\t\ttry {\n\t\t\t\tif (ignoreSSLErrors === 'force') {\n\t\t\t\t\tpreviousRejectUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n\t\t\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\t\t\t\t}\n\n\t\t\t\trsp = await fetch(url, {\n\t\t\t\t\theaders: { authorization: `Bearer ${token}`, 'content-type': 'application/json' },\n\t\t\t\t\tagent: agent as any,\n\t\t\t\t\t...options,\n\t\t\t\t});\n\n\t\t\t\tif (rsp.ok) {\n\t\t\t\t\tconst data: T = await rsp.json();\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\tthrow new ProviderFetchError('GitLab', rsp);\n\t\t\t} finally {\n\t\t\t\tif (ignoreSSLErrors === 'force') {\n\t\t\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = previousRejectUnauthorized;\n\t\t\t\t}\n\n\t\t\t\tstopwatch?.stop();\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tif (ex instanceof ProviderFetchError) {\n\t\t\t\tthis.handleRequestError(ex, token);\n\t\t\t} else if (Logger.isDebugging) {\n\t\t\t\tvoid window.showErrorMessage(`GitLab request failed: ${ex.message}`);\n\t\t\t}\n\n\t\t\tthrow ex;\n\t\t}\n\t}\n\n\tprivate handleRequestError(ex: ProviderFetchError, token: string): void {\n\t\tswitch (ex.status) {\n\t\t\tcase 404: // Not found\n\t\t\tcase 410: // Gone\n\t\t\tcase 422: // Unprocessable Entity\n\t\t\t\tthrow new ProviderRequestNotFoundError(ex);\n\t\t\t// case 429: //Too Many Requests\n\t\t\tcase 401: // Unauthorized\n\t\t\t\tthrow new AuthenticationError('gitlab', AuthenticationErrorReason.Unauthorized, ex);\n\t\t\tcase 403: // Forbidden\n\t\t\t\tif (ex.message.includes('rate limit exceeded')) {\n\t\t\t\t\tlet resetAt: number | undefined;\n\n\t\t\t\t\tconst reset = ex.response?.headers?.get('x-ratelimit-reset');\n\t\t\t\t\tif (reset != null) {\n\t\t\t\t\t\tresetAt = parseInt(reset, 10);\n\t\t\t\t\t\tif (Number.isNaN(resetAt)) {\n\t\t\t\t\t\t\tresetAt = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new ProviderRequestRateLimitError(ex, token, resetAt);\n\t\t\t\t}\n\t\t\t\tthrow new AuthenticationError('gitlab', AuthenticationErrorReason.Forbidden, ex);\n\t\t\tcase 500: // Internal Server Error\n\t\t\t\tif (ex.response != null) {\n\t\t\t\t\tvoid window.showErrorMessage(\n\t\t\t\t\t\t'GitLab failed to respond and might be experiencing issues. Please visit the [GitLab status page](https://status.gitlab.com/) for more information.',\n\t\t\t\t\t\t'OK',\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 502: // Bad Gateway\n\t\t\t\t// GitHub seems to return this status code for timeouts\n\t\t\t\tif (ex.message.includes('timeout')) {\n\t\t\t\t\tvoid window.showErrorMessage('GitLab request timed out');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (ex.status >= 400 && ex.status < 500) throw new ProviderRequestClientError(ex);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (Logger.isDebugging) {\n\t\t\tvoid window.showErrorMessage(\n\t\t\t\t`GitLab request failed: ${(ex.response as any)?.errors?.[0]?.message ?? ex.message}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate handleException(ex: Error, provider: RichRemoteProvider, cc: LogCorrelationContext | undefined): Error {\n\t\tLogger.error(ex, cc);\n\t\tdebugger;\n\n\t\tif (ex instanceof AuthenticationError) {\n\t\t\tvoid this.showAuthenticationErrorMessage(ex, provider);\n\t\t}\n\t\treturn ex;\n\t}\n\n\tprivate async showAuthenticationErrorMessage(ex: AuthenticationError, provider: RichRemoteProvider) {\n\t\tif (ex.reason === AuthenticationErrorReason.Unauthorized || ex.reason === AuthenticationErrorReason.Forbidden) {\n\t\t\tconst confirm = 'Reauthenticate';\n\t\t\tconst result = await window.showErrorMessage(\n\t\t\t\t`${ex.message}. Would you like to try reauthenticating${\n\t\t\t\t\tex.reason === AuthenticationErrorReason.Forbidden ? ' to provide additional access' : ''\n\t\t\t\t}?`,\n\t\t\t\tconfirm,\n\t\t\t);\n\n\t\t\tif (result === confirm) {\n\t\t\t\tawait provider.reauthenticate();\n\t\t\t}\n\t\t} else {\n\t\t\tvoid window.showErrorMessage(ex.message);\n\t\t}\n\t}\n}\n","import { PullRequest, PullRequestState } from '../../git/models';\nimport type { RichRemoteProvider } from '../../git/remotes/provider';\n\nexport interface GitLabUser {\n\tid: number;\n\tname: string;\n\tusername: string;\n\tpublicEmail: string | undefined;\n\tstate: string;\n\tavatarUrl: string | undefined;\n\twebUrl: string;\n}\n\nexport interface GitLabCommit {\n\tid: string;\n\tshort_id: string;\n\tcreated_at: Date;\n\tparent_ids: string[];\n\ttitle: string;\n\tmessage: string;\n\tauthor_name: string;\n\tauthor_email: string;\n\tauthored_date: Date;\n\tcommitter_name: string;\n\tcommitter_email: string;\n\tcommitted_date: Date;\n\tstatus: string;\n\tproject_id: number;\n}\n\nexport interface GitLabIssue {\n\tiid: string;\n\tauthor: {\n\t\tname: string;\n\t\tavatarUrl: string | null;\n\t\twebUrl: string;\n\t} | null;\n\ttitle: string;\n\tdescription: string;\n\tcreatedAt: string;\n\tupdatedAt: string;\n\tclosedAt: string;\n\twebUrl: string;\n\tstate: 'opened' | 'closed' | 'locked';\n}\n\nexport interface GitLabMergeRequest {\n\tiid: string;\n\tauthor: {\n\t\tname: string;\n\t\tavatarUrl: string | null;\n\t\twebUrl: string;\n\t} | null;\n\ttitle: string;\n\tdescription: string | null;\n\tstate: GitLabMergeRequestState;\n\tcreatedAt: string;\n\tupdatedAt: string;\n\tmergedAt: string | null;\n\twebUrl: string;\n}\n\nexport enum GitLabMergeRequestState {\n\tOPEN = 'opened',\n\tCLOSED = 'closed',\n\tMERGED = 'merged',\n\tLOCKED = 'locked',\n}\n\nexport namespace GitLabMergeRequest {\n\texport function fromState(state: GitLabMergeRequestState): PullRequestState {\n\t\treturn state === GitLabMergeRequestState.MERGED\n\t\t\t? PullRequestState.Merged\n\t\t\t: state === GitLabMergeRequestState.CLOSED || state === GitLabMergeRequestState.LOCKED\n\t\t\t? PullRequestState.Closed\n\t\t\t: PullRequestState.Open;\n\t}\n\n\texport function toState(state: PullRequestState): GitLabMergeRequestState {\n\t\treturn state === PullRequestState.Merged\n\t\t\t? GitLabMergeRequestState.MERGED\n\t\t\t: state === PullRequestState.Closed\n\t\t\t? GitLabMergeRequestState.CLOSED\n\t\t\t: GitLabMergeRequestState.OPEN;\n\t}\n}\n\nexport interface GitLabMergeRequestREST {\n\tid: number;\n\tiid: number;\n\tauthor: {\n\t\tname: string;\n\t\tavatar_url?: string;\n\t\tweb_url: string;\n\t} | null;\n\ttitle: string;\n\tdescription: string;\n\tstate: GitLabMergeRequestState;\n\tcreated_at: string;\n\tupdated_at: string;\n\tclosed_at: string | null;\n\tmerged_at: string | null;\n\tweb_url: string;\n}\n\nexport namespace GitLabMergeRequestREST {\n\texport function from(pr: GitLabMergeRequestREST, provider: RichRemoteProvider): PullRequest {\n\t\treturn new PullRequest(\n\t\t\tprovider,\n\t\t\t{\n\t\t\t\tname: pr.author?.name ?? 'Unknown',\n\t\t\t\tavatarUrl: pr.author?.avatar_url ?? '',\n\t\t\t\turl: pr.author?.web_url ?? '',\n\t\t\t},\n\t\t\tString(pr.iid),\n\t\t\tpr.title,\n\t\t\tpr.web_url,\n\t\t\tGitLabMergeRequest.fromState(pr.state),\n\t\t\tnew Date(pr.updated_at),\n\t\t\tpr.closed_at == null ? undefined : new Date(pr.closed_at),\n\t\t\tpr.merged_at == null ? undefined : new Date(pr.merged_at),\n\t\t);\n\t}\n}\n"],"names":[],"sourceRoot":""}